@page "/estacoes"
@using AcadeAppWeb.Models
@inject HttpClient Http

<h3>Estações de Coleta</h3>

@if (estacoes == null)
{
    <p><em>Carregando estações...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Localização</th>
                <th>Link Maps</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in estacoes)
            {
                <tr>
                    <td>@e.Nome</td>
                    <td>@e.Localizacao</td>
                    <td><a href="@e.LinkMaps" target="_blank">Mapa</a></td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => EditEstacao(e)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEstacao(e.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />
<h4>@(editingEstacao != null ? "Editar Estação" : "Adicionar Estação")</h4>

<EditForm Model="estacaoForm" OnValidSubmit="SaveEstacao">
    <InputText @bind-Value="estacaoForm.Nome" placeholder="Nome" class="form-control mb-2" />
    <InputText @bind-Value="estacaoForm.Localizacao" placeholder="Localização" class="form-control mb-2" />
    <InputText @bind-Value="estacaoForm.LinkMaps" placeholder="Link Maps" class="form-control mb-2" />

    <button type="submit" class="btn btn-primary">@((editingEstacao != null) ? "Atualizar" : "Adicionar")</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancelar</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="text-danger mt-2">@Message</p>
}

@code {
    private List<EstacaoDeColeta>? estacoes;
    private EstacaoDeColeta estacaoForm = new();
    private EstacaoDeColeta? editingEstacao;
    private string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEstacoes();
    }

    private async Task LoadEstacoes()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<EstacaoDeColeta>>("http://localhost:5206/api/estacoesdecoleta");
            estacoes = result ?? new List<EstacaoDeColeta>();
        }
        catch (Exception ex)
        {
            Message = $"Erro ao carregar estações: {ex.Message}";
            estacoes = new List<EstacaoDeColeta>();
        }
    }

    private void EditEstacao(EstacaoDeColeta e)
    {
        editingEstacao = e;
        estacaoForm = new EstacaoDeColeta
        {
            Id = e.Id,
            Nome = e.Nome,
            Localizacao = e.Localizacao,
            LinkMaps = e.LinkMaps
        };
    }

    private void CancelEdit()
    {
        editingEstacao = null;
        estacaoForm = new EstacaoDeColeta();
    }

    private async Task SaveEstacao()
    {
        try
        {
            if (editingEstacao == null)
            {
                await Http.PostAsJsonAsync("http://localhost:5206/api/estacoesdecoleta", estacaoForm);
            }
            else
            {
                await Http.PutAsJsonAsync($"http://localhost:5206/api/estacoesdecoleta/{estacaoForm.Id}", estacaoForm);
                editingEstacao = null;
            }

            estacaoForm = new EstacaoDeColeta();
            await LoadEstacoes();
            Message = string.Empty;
        }
        catch (Exception ex)
        {
            Message = $"Erro ao salvar estação: {ex.Message}";
        }
    }

    private async Task DeleteEstacao(int id)
    {
        try
        {
            await Http.DeleteAsync($"http://localhost:5206/api/estacoesdecoleta/{id}");
            await LoadEstacoes();
            Message = string.Empty;
        }
        catch (Exception ex)
        {
            Message = $"Erro ao excluir estação: {ex.Message}";
        }
    }
}
