@page "/usuarios"
@using AcadeAppWeb.Models
@inject HttpClient Http

<h3>Usuarios</h3>

@if (usuarios == null)
{
    <p><em>Loading...</em></p>
}
else if (!usuarios.Any())
{
    <p><em>Nenhum usuário carregado.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Email</th>
                <th>Senha</th>
                <th>Localização</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in usuarios)
            {
                <tr>
                    <td>@u.Nome</td>
                    <td>@u.Email</td>
                    <td>
                        <span style="cursor:pointer; user-select:none;" @onclick="() => TogglePassword(u)">
                            @if (u.ShowPassword)
                            {
                                @u.Senha
                            }
                            else
                            {
                                <span>••••••••</span>
                            }
                        </span>
                    </td>
                    <td><a href="@u.Localizacao"></a>@u.Localizacao</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => EditUsuario(u)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUsuario(u.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />
<h4>@(editingUsuario != null ? "Editar Usuário" : "Adicionar Usuário")</h4>

<EditForm Model="usuarioForm" OnValidSubmit="SaveUsuario">
    <InputText @bind-Value="usuarioForm.Nome" placeholder="Nome" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.Email" placeholder="Email" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.Senha" placeholder="Senha" type="password" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.Telefone" placeholder="Telefone" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.HistoricoAtv" placeholder="Histórico de Atividades" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.RelatorioImpacto" placeholder="Relatório de Impacto" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.InterfacePref" placeholder="Interface Preferida" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.IdiomaPref" placeholder="Idioma Preferido" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.Localizacao" placeholder="Localização" class="form-control mb-2" />
    <InputText @bind-Value="usuarioForm.PontosColeta" placeholder="Pontos de Coleta" class="form-control mb-2" />

    <button type="submit" class="btn btn-primary mt-2">@((editingUsuario != null) ? "Atualizar" : "Adicionar")</button>
    <button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Cancelar</button>
</EditForm>

@code {
    private List<Usuario>? usuarios;
    private Usuario usuarioForm = new();
    private Usuario? editingUsuario;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsuarios();
    }

    private async Task LoadUsuarios()
    {
        var apiUsers = await Http.GetFromJsonAsync<List<Usuario>>("http://localhost:5206/api/usuarios");
        if (apiUsers != null)
        {
            usuarios = apiUsers.Select(u => new Usuario
            {
                Id = u.Id,
                Nome = u.Nome,
                Email = u.Email,
                Senha = u.Senha,
                Telefone = u.Telefone,
                HistoricoAtv = u.HistoricoAtv,
                RelatorioImpacto = u.RelatorioImpacto,
                InterfacePref = u.InterfacePref,
                IdiomaPref = u.IdiomaPref,
                Localizacao = u.Localizacao,
                PontosColeta = u.PontosColeta,
                ShowPassword = false
            }).ToList();
        }
    }

    private void TogglePassword(Usuario user)
    {
        user.ShowPassword = !user.ShowPassword;
    }

    private void EditUsuario(Usuario u)
    {
        editingUsuario = u;
        usuarioForm = new Usuario
        {
            Id = u.Id,
            Nome = u.Nome,
            Email = u.Email,
            Senha = u.Senha,
            Telefone = u.Telefone,
            HistoricoAtv = u.HistoricoAtv,
            RelatorioImpacto = u.RelatorioImpacto,
            InterfacePref = u.InterfacePref,
            IdiomaPref = u.IdiomaPref,
            Localizacao = u.Localizacao,
            PontosColeta = u.PontosColeta
        };
    }

    private void CancelEdit()
    {
        editingUsuario = null;
        usuarioForm = new Usuario();
    }

    private async Task SaveUsuario()
    {
        if (editingUsuario == null)
        {
            await Http.PostAsJsonAsync("http://localhost:5206/api/usuarios", usuarioForm);
        }
        else
        {
            await Http.PutAsJsonAsync($"http://localhost:5206/api/usuarios/{usuarioForm.Id}", usuarioForm);
            editingUsuario = null;
        }

        usuarioForm = new Usuario();
        await LoadUsuarios();
    }

    private async Task DeleteUsuario(int id)
    {
        await Http.DeleteAsync($"http://localhost:5206/api/usuarios/{id}");
        await LoadUsuarios();
    }

    // Extend Usuario locally with ShowPassword flag
    private class Usuario : AcadeAppWeb.Models.Usuario
    {
        public bool ShowPassword { get; set; } = false;
    }
}
